This smart contract outlines the core functions for your LocalCryptoSwap platform, which is designed to 
facilitate P2P cryptocurrency trading with escrow management, dispute resolution, and fee structures. It includes 
features like trade creation, completion, cancellation, and arbitration, making it suitable for decentralized and secure trading.


1. Escrow Creation & Trade Initialization

This function allows a seller and buyer to initiate a trade by creating an escrow contract. The seller will lock the 
cryptocurrency into escrow, and the buyer can release the funds once they receive the agreed asset.


pragma solidity ^0.8.0;

contract LocalCryptoSwap {
    struct Escrow {
        address buyer;
        address seller;
        uint256 amount; // Amount of crypto being traded
        uint256 fee; // Trading fee
        bool active; // Is the escrow active?
        bool completed; // Is the trade completed?
        uint256 createdAt; // Timestamp when escrow was created
        uint256 releaseTime; // Time until the trade can be completed
    }

    mapping(bytes32 => Escrow) public escrows; // Mapping of trade hashes to escrow details

    event EscrowCreated(bytes32 indexed escrowId, address indexed buyer, address indexed seller, uint256 amount);
    event EscrowCompleted(bytes32 indexed escrowId, address indexed buyer, address indexed seller, uint256 amount);
    event EscrowCanceled(bytes32 indexed escrowId, address indexed buyer, address indexed seller);

    function createEscrow(address _seller, uint256 _amount, uint256 _fee, uint256 _releaseTime) external payable {
        require(msg.value == _amount, "You must send the exact amount to start the trade");

        bytes32 escrowId = keccak256(abi.encodePacked(msg.sender, _seller, _amount, block.timestamp));
        escrows[escrowId] = Escrow({
            buyer: msg.sender,
            seller: _seller,
            amount: _amount,
            fee: _fee,
            active: true,
            completed: false,
            createdAt: block.timestamp,
            releaseTime: _releaseTime
        });

        emit EscrowCreated(escrowId, msg.sender, _seller, _amount);
    }
}

2. Confirming and Completing the Transaction (Escrow Release)

Once both parties fulfill the conditions (e.g., the buyer confirms receiving the crypto), the escrow can be released, 
and the transaction will be completed.

function completeEscrow(bytes32 _escrowId) external {
    Escrow storage escrow = escrows[_escrowId];
    require(escrow.active, "Escrow is not active");
    require(!escrow.completed, "Escrow has already been completed");
    require(msg.sender == escrow.buyer, "Only the buyer can confirm the completion");
    require(block.timestamp >= escrow.releaseTime, "Release time has not yet arrived");

    // Transfer the funds to the seller after deducting fees
    uint256 feeAmount = (escrow.amount * escrow.fee) / 10000;
    uint256 amountToSeller = escrow.amount - feeAmount;

    payable(escrow.seller).transfer(amountToSeller);

    escrow.completed = true;
    escrow.active = false;

    emit EscrowCompleted(_escrowId, escrow.buyer, escrow.seller, escrow.amount);
}

3. Canceling the Escrow

If either the buyer or the seller wishes to cancel the trade (for example, if the seller fails to deliver),
the trade can be canceled, and the funds returned to the buyer.

function cancelEscrow(bytes32 _escrowId) external {
    Escrow storage escrow = escrows[_escrowId];
    require(escrow.active, "Escrow is not active");
    require(msg.sender == escrow.buyer || msg.sender == escrow.seller, "Only buyer or seller can cancel");
    require(!escrow.completed, "Escrow has already been completed");

    // If the buyer cancels, refund the buyer
    if (msg.sender == escrow.buyer) {
        payable(escrow.buyer).transfer(escrow.amount);
    }

    // If the seller cancels, refund the seller
    if (msg.sender == escrow.seller) {
        payable(escrow.seller).transfer(escrow.amount);
    }

    escrow.active = false;

    emit EscrowCanceled(_escrowId, escrow.buyer, escrow.seller);
}

4. Fee Management and Platform Revenue

A small percentage of each trade as a service fee for the platform.

address public platformOwner;
uint16 public tradingFee = 100; // Fee in basis points (1% fee)

constructor() {
    platformOwner = msg.sender;
}

function setTradingFee(uint16 _fee) external {
    require(msg.sender == platformOwner, "Only the platform owner can set the fee");
    tradingFee = _fee;
}

function collectPlatformFees(uint256 _amount) internal {
    uint256 feeAmount = (_amount * tradingFee) / 10000;
    payable(platformOwner).transfer(feeAmount);
}

5. Dispute Resolution (Arbitrator Involvement)

In cases of disputes, an arbitrator could step in to decide whether the escrow should be released or refunded.

address public arbitrator;

function setArbitrator(address _arbitrator) external {
    require(msg.sender == platformOwner, "Only the platform owner can set the arbitrator");
    arbitrator = _arbitrator;
}

function resolveDispute(bytes32 _escrowId, bool _releaseToBuyer) external {
    require(msg.sender == arbitrator, "Only the arbitrator can resolve disputes");

    Escrow storage escrow = escrows[_escrowId];
    require(escrow.active, "Escrow is not active");
    require(!escrow.completed, "Escrow has already been completed");

    if (_releaseToBuyer) {
        payable(escrow.buyer).transfer(escrow.amount);
    } else {
        payable(escrow.seller).transfer(escrow.amount);
    }

    escrow.completed = true;
    escrow.active = false;
}

6. Signature Verification for Secure Instruction Relay

If the system allows relayers to perform actions on behalf of users (such as signing and confirming trade actions),
you'll need a mechanism for verifying the authenticity of the sender's instructions using cryptographic signatures.

function verifySignature(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {
    return ecrecover(_hash, _v, _r, _s);
}

7. Event Logging and Transparency

As a decentralized P2P platform, transparency is crucial. Emitting events helps users track trades, cancellations, and disputes.

address public arbitrator;

function setArbitrator(address _arbitrator) external {
    require(msg.sender == platformOwner, "Only the platform owner can set the arbitrator");
    arbitrator = _arbitrator;
}

function resolveDispute(bytes32 _escrowId, bool _releaseToBuyer) external {
    require(msg.sender == arbitrator, "Only the arbitrator can resolve disputes");

    Escrow storage escrow = escrows[_escrowId];
    require(escrow.active, "Escrow is not active");
    require(!escrow.completed, "Escrow has already been completed");

    if (_releaseToBuyer) {
        payable(escrow.buyer).transfer(escrow.amount);
    } else {
        payable(escrow.seller).transfer(escrow.amount);
    }

    escrow.completed = true;
    escrow.active = false;
}

6. Signature Verification for Secure Instruction Relay

If the system allows relayers to perform actions on behalf of users (such as signing and confirming trade actions), we'll need a
mechanism for verifying the authenticity of the sender's instructions using cryptographic signatures.

function verifySignature(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {
    return ecrecover(_hash, _v, _r, _s);
}

7. Event Logging and Transparency

As a decentralized P2P platform, transparency is crucial. Emitting events helps users track trades, cancellations, and disputes.

event EscrowCreated(bytes32 indexed escrowId, address indexed buyer, address indexed seller, uint256 amount);
event EscrowCompleted(bytes32 indexed escrowId, address indexed buyer, address indexed seller, uint256 amount);
event EscrowCanceled(bytes32 indexed escrowId, address indexed buyer, address indexed seller);
event ArbitratorResolved(bytes32 indexed escrowId, bool releasedToBuyer);


